// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tTest_tCalc2_Block_entry12_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        tCalc1ResultB,
        tCalc1ResultA,
        p_read,
        t
);

parameter    ap_ST_fsm_state1 = 107'd1;
parameter    ap_ST_fsm_state2 = 107'd2;
parameter    ap_ST_fsm_state3 = 107'd4;
parameter    ap_ST_fsm_state4 = 107'd8;
parameter    ap_ST_fsm_state5 = 107'd16;
parameter    ap_ST_fsm_state6 = 107'd32;
parameter    ap_ST_fsm_state7 = 107'd64;
parameter    ap_ST_fsm_state8 = 107'd128;
parameter    ap_ST_fsm_state9 = 107'd256;
parameter    ap_ST_fsm_state10 = 107'd512;
parameter    ap_ST_fsm_state11 = 107'd1024;
parameter    ap_ST_fsm_state12 = 107'd2048;
parameter    ap_ST_fsm_state13 = 107'd4096;
parameter    ap_ST_fsm_state14 = 107'd8192;
parameter    ap_ST_fsm_state15 = 107'd16384;
parameter    ap_ST_fsm_state16 = 107'd32768;
parameter    ap_ST_fsm_state17 = 107'd65536;
parameter    ap_ST_fsm_state18 = 107'd131072;
parameter    ap_ST_fsm_state19 = 107'd262144;
parameter    ap_ST_fsm_state20 = 107'd524288;
parameter    ap_ST_fsm_state21 = 107'd1048576;
parameter    ap_ST_fsm_state22 = 107'd2097152;
parameter    ap_ST_fsm_state23 = 107'd4194304;
parameter    ap_ST_fsm_state24 = 107'd8388608;
parameter    ap_ST_fsm_state25 = 107'd16777216;
parameter    ap_ST_fsm_state26 = 107'd33554432;
parameter    ap_ST_fsm_state27 = 107'd67108864;
parameter    ap_ST_fsm_state28 = 107'd134217728;
parameter    ap_ST_fsm_state29 = 107'd268435456;
parameter    ap_ST_fsm_state30 = 107'd536870912;
parameter    ap_ST_fsm_state31 = 107'd1073741824;
parameter    ap_ST_fsm_state32 = 107'd2147483648;
parameter    ap_ST_fsm_state33 = 107'd4294967296;
parameter    ap_ST_fsm_state34 = 107'd8589934592;
parameter    ap_ST_fsm_state35 = 107'd17179869184;
parameter    ap_ST_fsm_state36 = 107'd34359738368;
parameter    ap_ST_fsm_state37 = 107'd68719476736;
parameter    ap_ST_fsm_state38 = 107'd137438953472;
parameter    ap_ST_fsm_state39 = 107'd274877906944;
parameter    ap_ST_fsm_state40 = 107'd549755813888;
parameter    ap_ST_fsm_state41 = 107'd1099511627776;
parameter    ap_ST_fsm_state42 = 107'd2199023255552;
parameter    ap_ST_fsm_state43 = 107'd4398046511104;
parameter    ap_ST_fsm_state44 = 107'd8796093022208;
parameter    ap_ST_fsm_state45 = 107'd17592186044416;
parameter    ap_ST_fsm_state46 = 107'd35184372088832;
parameter    ap_ST_fsm_state47 = 107'd70368744177664;
parameter    ap_ST_fsm_state48 = 107'd140737488355328;
parameter    ap_ST_fsm_state49 = 107'd281474976710656;
parameter    ap_ST_fsm_state50 = 107'd562949953421312;
parameter    ap_ST_fsm_state51 = 107'd1125899906842624;
parameter    ap_ST_fsm_state52 = 107'd2251799813685248;
parameter    ap_ST_fsm_state53 = 107'd4503599627370496;
parameter    ap_ST_fsm_state54 = 107'd9007199254740992;
parameter    ap_ST_fsm_state55 = 107'd18014398509481984;
parameter    ap_ST_fsm_state56 = 107'd36028797018963968;
parameter    ap_ST_fsm_state57 = 107'd72057594037927936;
parameter    ap_ST_fsm_state58 = 107'd144115188075855872;
parameter    ap_ST_fsm_state59 = 107'd288230376151711744;
parameter    ap_ST_fsm_state60 = 107'd576460752303423488;
parameter    ap_ST_fsm_state61 = 107'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 107'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 107'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 107'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 107'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 107'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 107'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 107'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 107'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 107'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 107'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 107'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 107'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 107'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 107'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 107'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 107'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 107'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 107'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 107'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 107'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 107'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 107'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 107'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 107'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 107'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 107'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 107'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 107'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 107'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 107'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 107'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 107'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 107'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 107'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 107'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 107'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 107'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 107'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 107'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 107'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 107'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 107'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 107'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 107'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 107'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 107'd81129638414606681695789005144064;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] tCalc1ResultB;
input  [31:0] tCalc1ResultA;
input  [15:0] p_read;
output  [31:0] t;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] t;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [32:0] add_ln57_fu_152_p2;
reg   [32:0] add_ln57_reg_688;
wire    ap_CS_fsm_state2;
wire   [10:0] trunc_ln57_1_fu_192_p1;
reg   [10:0] trunc_ln57_1_reg_696;
wire   [31:0] sub_ln57_fu_196_p2;
reg   [31:0] sub_ln57_reg_701;
wire   [5:0] sub_ln57_1_fu_206_p2;
reg   [5:0] sub_ln57_1_reg_708;
wire   [0:0] icmp_ln57_fu_212_p2;
reg   [0:0] icmp_ln57_reg_713;
wire    ap_CS_fsm_state3;
wire   [1:0] or_ln_i_i_fu_297_p3;
reg   [1:0] or_ln_i_i_reg_718;
wire   [0:0] icmp_ln57_3_fu_308_p2;
reg   [0:0] icmp_ln57_3_reg_723;
wire   [63:0] lshr_ln57_1_fu_323_p2;
reg   [63:0] lshr_ln57_1_reg_728;
wire   [63:0] shl_ln57_fu_338_p2;
reg   [63:0] shl_ln57_reg_733;
reg   [62:0] lshr_ln57_1_i_reg_738;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_2_reg_743;
wire   [63:0] select_ln57_2_fu_421_p3;
reg   [63:0] select_ln57_2_reg_748;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_141_p2;
reg   [63:0] pf_reg_753;
wire    ap_CS_fsm_state62;
wire   [0:0] tmp_3_fu_435_p3;
reg   [0:0] tmp_3_reg_758;
wire    ap_CS_fsm_state63;
wire   [53:0] select_ln57_3_fu_479_p3;
reg   [53:0] select_ln57_3_reg_763;
wire   [0:0] icmp_ln57_4_fu_487_p2;
reg   [0:0] icmp_ln57_4_reg_768;
wire   [0:0] icmp_ln57_5_fu_503_p2;
reg   [0:0] icmp_ln57_5_reg_775;
wire   [10:0] select_ln57_4_fu_521_p3;
reg   [10:0] select_ln57_4_reg_780;
wire   [0:0] icmp_ln57_6_fu_529_p2;
reg   [0:0] icmp_ln57_6_reg_787;
wire   [31:0] trunc_ln57_6_fu_535_p1;
reg   [31:0] trunc_ln57_6_reg_793;
wire   [0:0] icmp_ln57_8_fu_549_p2;
reg   [0:0] icmp_ln57_8_reg_799;
wire   [31:0] denom_fu_641_p3;
reg   [31:0] denom_reg_804;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire   [17:0] grp_fu_660_p2;
reg   [17:0] udiv_ln58_reg_819;
wire    ap_CS_fsm_state106;
wire   [31:0] shl_ln58_1_i_fu_669_p3;
reg   [31:0] t_preg;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state6;
wire   [32:0] zext_ln57_fu_146_p1;
wire   [32:0] zext_ln57_1_fu_149_p1;
reg   [32:0] tmp_i_i_fu_158_p4;
wire   [33:0] tmp_1_i_i_fu_168_p3;
wire  signed [63:0] sext_ln57_fu_176_p1;
reg   [63:0] tmp_2_i_i_fu_180_p3;
wire   [31:0] trunc_ln57_fu_188_p1;
wire   [5:0] trunc_ln57_2_fu_202_p1;
wire   [31:0] add_ln57_1_fu_217_p2;
wire   [30:0] tmp_fu_222_p4;
wire   [32:0] zext_ln57_2_fu_238_p1;
wire   [32:0] lshr_ln57_fu_241_p2;
wire   [32:0] and_ln57_fu_247_p2;
wire   [0:0] icmp_ln57_1_fu_232_p2;
wire   [0:0] icmp_ln57_2_fu_252_p2;
wire   [0:0] tmp_1_fu_264_p3;
wire   [0:0] bit_select_i_i_i_i_fu_278_p3;
wire   [0:0] xor_ln57_fu_272_p2;
wire   [0:0] and_ln57_2_fu_285_p2;
wire   [0:0] and_ln57_1_fu_258_p2;
wire   [0:0] or_ln57_fu_291_p2;
wire   [31:0] add_ln57_2_fu_314_p2;
wire   [63:0] zext_ln57_3_fu_305_p1;
wire   [63:0] zext_ln57_4_fu_319_p1;
wire   [31:0] sub_ln57_2_fu_329_p2;
wire   [63:0] zext_ln57_5_fu_334_p1;
wire   [63:0] select_ln57_fu_344_p3;
wire   [63:0] zext_ln57_6_fu_349_p1;
wire   [63:0] add_ln57_3_fu_352_p2;
wire   [10:0] sub_ln57_3_fu_386_p2;
wire   [10:0] select_ln57_1_fu_379_p3;
wire   [10:0] add_ln57_4_fu_391_p2;
wire   [63:0] zext_ln57_7_fu_376_p1;
wire   [11:0] tmp_5_i_i_fu_397_p3;
wire   [63:0] pi_assign_i_fu_405_p5;
wire   [63:0] bitcast_ln756_fu_417_p1;
wire   [63:0] bitcast_ln724_fu_428_p1;
wire   [10:0] tmp_7_i_i6_fu_443_p4;
wire   [51:0] trunc_ln57_4_fu_457_p1;
wire   [52:0] zext_ln57_7_i_cast_fu_461_p3;
wire   [53:0] zext_ln57_9_fu_469_p1;
wire   [53:0] sub_ln57_4_fu_473_p2;
wire   [62:0] trunc_ln57_3_fu_431_p1;
wire   [11:0] zext_ln57_8_fu_453_p1;
wire   [11:0] sub_ln57_5_fu_493_p2;
wire   [10:0] trunc_ln57_5_fu_499_p1;
wire   [10:0] add_ln57_5_fu_509_p2;
wire   [10:0] sub_ln57_6_fu_515_p2;
wire   [5:0] tmp_4_fu_539_p4;
wire   [53:0] zext_ln57_11_fu_563_p1;
wire   [53:0] ashr_ln57_fu_566_p2;
wire   [0:0] icmp_ln57_7_fu_558_p2;
wire   [31:0] trunc_ln57_7_fu_571_p1;
wire   [31:0] select_ln57_5_fu_575_p3;
wire   [31:0] zext_ln57_10_fu_555_p1;
wire   [31:0] shl_ln57_1_fu_590_p2;
wire   [31:0] select_ln57_7_fu_595_p3;
wire   [0:0] xor_ln57_1_fu_609_p2;
wire   [0:0] and_ln57_3_fu_614_p2;
wire   [31:0] select_ln57_8_fu_602_p3;
wire   [0:0] or_ln57_1_fu_626_p2;
wire   [0:0] xor_ln57_2_fu_630_p2;
wire   [0:0] and_ln57_4_fu_636_p2;
wire   [31:0] select_ln57_6_fu_582_p3;
wire   [31:0] select_ln57_9_fu_619_p3;
wire   [37:0] grp_fu_660_p0;
wire   [31:0] grp_fu_660_p1;
wire   [17:0] trunc_ln58_fu_666_p1;
reg    grp_fu_660_ap_start;
wire    grp_fu_660_ap_done;
reg   [106:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire   [37:0] grp_fu_660_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 107'd1;
#0 add_ln57_reg_688 = 33'd0;
#0 trunc_ln57_1_reg_696 = 11'd0;
#0 sub_ln57_reg_701 = 32'd0;
#0 sub_ln57_1_reg_708 = 6'd0;
#0 icmp_ln57_reg_713 = 1'd0;
#0 or_ln_i_i_reg_718 = 2'd0;
#0 icmp_ln57_3_reg_723 = 1'd0;
#0 lshr_ln57_1_reg_728 = 64'd0;
#0 shl_ln57_reg_733 = 64'd0;
#0 lshr_ln57_1_i_reg_738 = 63'd0;
#0 tmp_2_reg_743 = 1'd0;
#0 select_ln57_2_reg_748 = 64'd0;
#0 pf_reg_753 = 64'd0;
#0 tmp_3_reg_758 = 1'd0;
#0 select_ln57_3_reg_763 = 54'd0;
#0 icmp_ln57_4_reg_768 = 1'd0;
#0 icmp_ln57_5_reg_775 = 1'd0;
#0 select_ln57_4_reg_780 = 11'd0;
#0 icmp_ln57_6_reg_787 = 1'd0;
#0 trunc_ln57_6_reg_793 = 32'd0;
#0 icmp_ln57_8_reg_799 = 1'd0;
#0 denom_reg_804 = 32'd0;
#0 udiv_ln58_reg_819 = 18'd0;
#0 t_preg = 32'd0;
end

tTest_dsqrt_64ns_64ns_64_57_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 57 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_57_no_dsp_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(select_ln57_2_reg_748),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

tTest_udiv_38ns_32ns_18_42_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 42 ),
    .din0_WIDTH( 38 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 18 ))
udiv_38ns_32ns_18_42_seq_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_660_ap_start),
    .done(grp_fu_660_ap_done),
    .din0(grp_fu_660_p0),
    .din1(grp_fu_660_p1),
    .ce(1'b1),
    .dout(grp_fu_660_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        add_ln57_reg_688 <= 33'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            add_ln57_reg_688 <= add_ln57_fu_152_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state107)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        denom_reg_804 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state64)) begin
            denom_reg_804 <= denom_fu_641_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln57_3_reg_723 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            icmp_ln57_3_reg_723 <= icmp_ln57_3_fu_308_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln57_4_reg_768 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            icmp_ln57_4_reg_768 <= icmp_ln57_4_fu_487_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln57_5_reg_775 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            icmp_ln57_5_reg_775 <= icmp_ln57_5_fu_503_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln57_6_reg_787 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            icmp_ln57_6_reg_787 <= icmp_ln57_6_fu_529_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln57_8_reg_799 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            icmp_ln57_8_reg_799 <= icmp_ln57_8_fu_549_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln57_reg_713 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            icmp_ln57_reg_713 <= icmp_ln57_fu_212_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lshr_ln57_1_i_reg_738 <= 63'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            lshr_ln57_1_i_reg_738 <= {{add_ln57_3_fu_352_p2[63:1]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lshr_ln57_1_reg_728 <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            lshr_ln57_1_reg_728 <= lshr_ln57_1_fu_323_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                or_ln_i_i_reg_718[0] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
                        or_ln_i_i_reg_718[0] <= or_ln_i_i_fu_297_p3[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        pf_reg_753 <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state62)) begin
            pf_reg_753 <= grp_fu_141_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        select_ln57_2_reg_748 <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            select_ln57_2_reg_748 <= select_ln57_2_fu_421_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        select_ln57_3_reg_763 <= 54'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            select_ln57_3_reg_763 <= select_ln57_3_fu_479_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        select_ln57_4_reg_780 <= 11'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            select_ln57_4_reg_780 <= select_ln57_4_fu_521_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        shl_ln57_reg_733 <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            shl_ln57_reg_733 <= shl_ln57_fu_338_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        sub_ln57_1_reg_708 <= 6'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            sub_ln57_1_reg_708 <= sub_ln57_1_fu_206_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        sub_ln57_reg_701 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            sub_ln57_reg_701 <= sub_ln57_fu_196_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                t_preg[14] <= 1'b0;
        t_preg[15] <= 1'b0;
        t_preg[16] <= 1'b0;
        t_preg[17] <= 1'b0;
        t_preg[18] <= 1'b0;
        t_preg[19] <= 1'b0;
        t_preg[20] <= 1'b0;
        t_preg[21] <= 1'b0;
        t_preg[22] <= 1'b0;
        t_preg[23] <= 1'b0;
        t_preg[24] <= 1'b0;
        t_preg[25] <= 1'b0;
        t_preg[26] <= 1'b0;
        t_preg[27] <= 1'b0;
        t_preg[28] <= 1'b0;
        t_preg[29] <= 1'b0;
        t_preg[30] <= 1'b0;
        t_preg[31] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state107)) begin
                        t_preg[31 : 14] <= shl_ln58_1_i_fu_669_p3[31 : 14];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_2_reg_743 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            tmp_2_reg_743 <= add_ln57_3_fu_352_p2[32'd54];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_3_reg_758 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            tmp_3_reg_758 <= bitcast_ln724_fu_428_p1[32'd63];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        trunc_ln57_1_reg_696 <= 11'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            trunc_ln57_1_reg_696 <= trunc_ln57_1_fu_192_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        trunc_ln57_6_reg_793 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            trunc_ln57_6_reg_793 <= trunc_ln57_6_fu_535_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udiv_ln58_reg_819 <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state106)) begin
            udiv_ln58_reg_819 <= grp_fu_660_p2;
        end
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_660_ap_start = 1'b1;
    end else begin
        grp_fu_660_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        t = shl_ln58_1_i_fu_669_p3;
    end else begin
        t = t_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_1_fu_217_p2 = ($signed(sub_ln57_reg_701) + $signed(32'd4294967243));

assign add_ln57_2_fu_314_p2 = ($signed(sub_ln57_reg_701) + $signed(32'd4294967242));

assign add_ln57_3_fu_352_p2 = (select_ln57_fu_344_p3 + zext_ln57_6_fu_349_p1);

assign add_ln57_4_fu_391_p2 = (sub_ln57_3_fu_386_p2 + select_ln57_1_fu_379_p3);

assign add_ln57_5_fu_509_p2 = ($signed(trunc_ln57_5_fu_499_p1) + $signed(11'd2026));

assign add_ln57_fu_152_p2 = (zext_ln57_fu_146_p1 + zext_ln57_1_fu_149_p1);

assign and_ln57_1_fu_258_p2 = (icmp_ln57_2_fu_252_p2 & icmp_ln57_1_fu_232_p2);

assign and_ln57_2_fu_285_p2 = (xor_ln57_fu_272_p2 & bit_select_i_i_i_i_fu_278_p3);

assign and_ln57_3_fu_614_p2 = (xor_ln57_1_fu_609_p2 & icmp_ln57_6_reg_787);

assign and_ln57_4_fu_636_p2 = (xor_ln57_2_fu_630_p2 & icmp_ln57_5_reg_775);

assign and_ln57_fu_247_p2 = (lshr_ln57_fu_241_p2 & add_ln57_reg_688);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ashr_ln57_fu_566_p2 = $signed(select_ln57_3_reg_763) >>> zext_ln57_11_fu_563_p1;

assign bit_select_i_i_i_i_fu_278_p3 = add_ln57_reg_688[add_ln57_1_fu_217_p2];

assign bitcast_ln724_fu_428_p1 = pf_reg_753;

assign bitcast_ln756_fu_417_p1 = pi_assign_i_fu_405_p5;

assign denom_fu_641_p3 = ((and_ln57_4_fu_636_p2[0:0] == 1'b1) ? select_ln57_6_fu_582_p3 : select_ln57_9_fu_619_p3);

assign grp_fu_660_p0 = {{p_read}, {22'd0}};

assign grp_fu_660_p1 = grp_fu_660_p10;

assign grp_fu_660_p10 = denom_reg_804;

assign icmp_ln57_1_fu_232_p2 = (($signed(tmp_fu_222_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_252_p2 = ((and_ln57_fu_247_p2 != 33'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_3_fu_308_p2 = (($signed(add_ln57_1_fu_217_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln57_4_fu_487_p2 = ((trunc_ln57_3_fu_431_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_5_fu_503_p2 = (($signed(sub_ln57_5_fu_493_p2) > $signed(12'd22)) ? 1'b1 : 1'b0);

assign icmp_ln57_6_fu_529_p2 = ((sub_ln57_5_fu_493_p2 == 12'd22) ? 1'b1 : 1'b0);

assign icmp_ln57_7_fu_558_p2 = ((select_ln57_4_reg_780 < 11'd54) ? 1'b1 : 1'b0);

assign icmp_ln57_8_fu_549_p2 = ((tmp_4_fu_539_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_212_p2 = ((add_ln57_reg_688 == 33'd0) ? 1'b1 : 1'b0);

assign lshr_ln57_1_fu_323_p2 = zext_ln57_3_fu_305_p1 >> zext_ln57_4_fu_319_p1;

assign lshr_ln57_fu_241_p2 = 33'd8589934591 >> zext_ln57_2_fu_238_p1;

assign or_ln57_1_fu_626_p2 = (icmp_ln57_6_reg_787 | icmp_ln57_4_reg_768);

assign or_ln57_fu_291_p2 = (and_ln57_2_fu_285_p2 | and_ln57_1_fu_258_p2);

assign or_ln_i_i_fu_297_p3 = {{1'd0}, {or_ln57_fu_291_p2}};

assign pi_assign_i_fu_405_p5 = {{tmp_5_i_i_fu_397_p3}, {zext_ln57_7_fu_376_p1[51:0]}};

assign select_ln57_1_fu_379_p3 = ((tmp_2_reg_743[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln57_2_fu_421_p3 = ((icmp_ln57_reg_713[0:0] == 1'b1) ? 64'd0 : bitcast_ln756_fu_417_p1);

assign select_ln57_3_fu_479_p3 = ((tmp_3_fu_435_p3[0:0] == 1'b1) ? sub_ln57_4_fu_473_p2 : zext_ln57_9_fu_469_p1);

assign select_ln57_4_fu_521_p3 = ((icmp_ln57_5_fu_503_p2[0:0] == 1'b1) ? add_ln57_5_fu_509_p2 : sub_ln57_6_fu_515_p2);

assign select_ln57_5_fu_575_p3 = ((tmp_3_reg_758[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln57_6_fu_582_p3 = ((icmp_ln57_7_fu_558_p2[0:0] == 1'b1) ? trunc_ln57_7_fu_571_p1 : select_ln57_5_fu_575_p3);

assign select_ln57_7_fu_595_p3 = ((icmp_ln57_8_reg_799[0:0] == 1'b1) ? shl_ln57_1_fu_590_p2 : 32'd0);

assign select_ln57_8_fu_602_p3 = ((icmp_ln57_4_reg_768[0:0] == 1'b1) ? 32'd0 : select_ln57_7_fu_595_p3);

assign select_ln57_9_fu_619_p3 = ((and_ln57_3_fu_614_p2[0:0] == 1'b1) ? trunc_ln57_6_reg_793 : select_ln57_8_fu_602_p3);

assign select_ln57_fu_344_p3 = ((icmp_ln57_3_reg_723[0:0] == 1'b1) ? lshr_ln57_1_reg_728 : shl_ln57_reg_733);

assign sext_ln57_fu_176_p1 = $signed(tmp_1_i_i_fu_168_p3);

assign shl_ln57_1_fu_590_p2 = trunc_ln57_6_reg_793 << zext_ln57_10_fu_555_p1;

assign shl_ln57_fu_338_p2 = zext_ln57_3_fu_305_p1 << zext_ln57_5_fu_334_p1;

assign shl_ln58_1_i_fu_669_p3 = {{trunc_ln58_fu_666_p1}, {14'd0}};

assign sub_ln57_1_fu_206_p2 = (6'd23 - trunc_ln57_2_fu_202_p1);

assign sub_ln57_2_fu_329_p2 = (32'd54 - sub_ln57_reg_701);

assign sub_ln57_3_fu_386_p2 = (11'd11 - trunc_ln57_1_reg_696);

assign sub_ln57_4_fu_473_p2 = (54'd0 - zext_ln57_9_fu_469_p1);

assign sub_ln57_5_fu_493_p2 = (12'd1075 - zext_ln57_8_fu_453_p1);

assign sub_ln57_6_fu_515_p2 = (11'd22 - trunc_ln57_5_fu_499_p1);

assign sub_ln57_fu_196_p2 = (32'd33 - trunc_ln57_fu_188_p1);

assign tmp_1_fu_264_p3 = add_ln57_1_fu_217_p2[32'd31];

assign tmp_1_i_i_fu_168_p3 = {{1'd1}, {tmp_i_i_fu_158_p4}};


always @ (sext_ln57_fu_176_p1) begin
    if (sext_ln57_fu_176_p1[0] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd0;
    end else if (sext_ln57_fu_176_p1[1] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd1;
    end else if (sext_ln57_fu_176_p1[2] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd2;
    end else if (sext_ln57_fu_176_p1[3] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd3;
    end else if (sext_ln57_fu_176_p1[4] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd4;
    end else if (sext_ln57_fu_176_p1[5] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd5;
    end else if (sext_ln57_fu_176_p1[6] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd6;
    end else if (sext_ln57_fu_176_p1[7] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd7;
    end else if (sext_ln57_fu_176_p1[8] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd8;
    end else if (sext_ln57_fu_176_p1[9] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd9;
    end else if (sext_ln57_fu_176_p1[10] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd10;
    end else if (sext_ln57_fu_176_p1[11] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd11;
    end else if (sext_ln57_fu_176_p1[12] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd12;
    end else if (sext_ln57_fu_176_p1[13] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd13;
    end else if (sext_ln57_fu_176_p1[14] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd14;
    end else if (sext_ln57_fu_176_p1[15] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd15;
    end else if (sext_ln57_fu_176_p1[16] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd16;
    end else if (sext_ln57_fu_176_p1[17] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd17;
    end else if (sext_ln57_fu_176_p1[18] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd18;
    end else if (sext_ln57_fu_176_p1[19] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd19;
    end else if (sext_ln57_fu_176_p1[20] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd20;
    end else if (sext_ln57_fu_176_p1[21] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd21;
    end else if (sext_ln57_fu_176_p1[22] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd22;
    end else if (sext_ln57_fu_176_p1[23] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd23;
    end else if (sext_ln57_fu_176_p1[24] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd24;
    end else if (sext_ln57_fu_176_p1[25] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd25;
    end else if (sext_ln57_fu_176_p1[26] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd26;
    end else if (sext_ln57_fu_176_p1[27] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd27;
    end else if (sext_ln57_fu_176_p1[28] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd28;
    end else if (sext_ln57_fu_176_p1[29] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd29;
    end else if (sext_ln57_fu_176_p1[30] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd30;
    end else if (sext_ln57_fu_176_p1[31] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd31;
    end else if (sext_ln57_fu_176_p1[32] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd32;
    end else if (sext_ln57_fu_176_p1[33] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd33;
    end else if (sext_ln57_fu_176_p1[34] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd34;
    end else if (sext_ln57_fu_176_p1[35] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd35;
    end else if (sext_ln57_fu_176_p1[36] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd36;
    end else if (sext_ln57_fu_176_p1[37] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd37;
    end else if (sext_ln57_fu_176_p1[38] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd38;
    end else if (sext_ln57_fu_176_p1[39] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd39;
    end else if (sext_ln57_fu_176_p1[40] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd40;
    end else if (sext_ln57_fu_176_p1[41] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd41;
    end else if (sext_ln57_fu_176_p1[42] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd42;
    end else if (sext_ln57_fu_176_p1[43] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd43;
    end else if (sext_ln57_fu_176_p1[44] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd44;
    end else if (sext_ln57_fu_176_p1[45] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd45;
    end else if (sext_ln57_fu_176_p1[46] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd46;
    end else if (sext_ln57_fu_176_p1[47] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd47;
    end else if (sext_ln57_fu_176_p1[48] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd48;
    end else if (sext_ln57_fu_176_p1[49] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd49;
    end else if (sext_ln57_fu_176_p1[50] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd50;
    end else if (sext_ln57_fu_176_p1[51] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd51;
    end else if (sext_ln57_fu_176_p1[52] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd52;
    end else if (sext_ln57_fu_176_p1[53] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd53;
    end else if (sext_ln57_fu_176_p1[54] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd54;
    end else if (sext_ln57_fu_176_p1[55] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd55;
    end else if (sext_ln57_fu_176_p1[56] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd56;
    end else if (sext_ln57_fu_176_p1[57] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd57;
    end else if (sext_ln57_fu_176_p1[58] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd58;
    end else if (sext_ln57_fu_176_p1[59] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd59;
    end else if (sext_ln57_fu_176_p1[60] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd60;
    end else if (sext_ln57_fu_176_p1[61] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd61;
    end else if (sext_ln57_fu_176_p1[62] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd62;
    end else if (sext_ln57_fu_176_p1[63] == 1'b1) begin
        tmp_2_i_i_fu_180_p3 = 64'd63;
    end else begin
        tmp_2_i_i_fu_180_p3 = 64'd64;
    end
end

assign tmp_3_fu_435_p3 = bitcast_ln724_fu_428_p1[32'd63];

assign tmp_4_fu_539_p4 = {{select_ln57_4_fu_521_p3[10:5]}};

assign tmp_5_i_i_fu_397_p3 = {{1'd0}, {add_ln57_4_fu_391_p2}};

assign tmp_7_i_i6_fu_443_p4 = {{bitcast_ln724_fu_428_p1[62:52]}};

assign tmp_fu_222_p4 = {{add_ln57_1_fu_217_p2[31:1]}};

integer ap_tvar_int_0;

always @ (add_ln57_fu_152_p2) begin
    for (ap_tvar_int_0 = 33 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 32 - 0) begin
            tmp_i_i_fu_158_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_i_i_fu_158_p4[ap_tvar_int_0] = add_ln57_fu_152_p2[32 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln57_1_fu_192_p1 = tmp_2_i_i_fu_180_p3[10:0];

assign trunc_ln57_2_fu_202_p1 = sub_ln57_fu_196_p2[5:0];

assign trunc_ln57_3_fu_431_p1 = bitcast_ln724_fu_428_p1[62:0];

assign trunc_ln57_4_fu_457_p1 = bitcast_ln724_fu_428_p1[51:0];

assign trunc_ln57_5_fu_499_p1 = sub_ln57_5_fu_493_p2[10:0];

assign trunc_ln57_6_fu_535_p1 = select_ln57_3_fu_479_p3[31:0];

assign trunc_ln57_7_fu_571_p1 = ashr_ln57_fu_566_p2[31:0];

assign trunc_ln57_fu_188_p1 = tmp_2_i_i_fu_180_p3[31:0];

assign trunc_ln58_fu_666_p1 = udiv_ln58_reg_819[17:0];

assign xor_ln57_1_fu_609_p2 = (icmp_ln57_4_reg_768 ^ 1'd1);

assign xor_ln57_2_fu_630_p2 = (or_ln57_1_fu_626_p2 ^ 1'd1);

assign xor_ln57_fu_272_p2 = (tmp_1_fu_264_p3 ^ 1'd1);

assign zext_ln57_10_fu_555_p1 = select_ln57_4_reg_780;

assign zext_ln57_11_fu_563_p1 = select_ln57_4_reg_780;

assign zext_ln57_1_fu_149_p1 = tCalc1ResultA;

assign zext_ln57_2_fu_238_p1 = sub_ln57_1_reg_708;

assign zext_ln57_3_fu_305_p1 = add_ln57_reg_688;

assign zext_ln57_4_fu_319_p1 = add_ln57_2_fu_314_p2;

assign zext_ln57_5_fu_334_p1 = sub_ln57_2_fu_329_p2;

assign zext_ln57_6_fu_349_p1 = or_ln_i_i_reg_718;

assign zext_ln57_7_fu_376_p1 = lshr_ln57_1_i_reg_738;

assign zext_ln57_7_i_cast_fu_461_p3 = {{1'd1}, {trunc_ln57_4_fu_457_p1}};

assign zext_ln57_8_fu_453_p1 = tmp_7_i_i6_fu_443_p4;

assign zext_ln57_9_fu_469_p1 = zext_ln57_7_i_cast_fu_461_p3;

assign zext_ln57_fu_146_p1 = tCalc1ResultB;

always @ (posedge ap_clk) begin
    or_ln_i_i_reg_718[1] <= 1'b0;
    t_preg[13:0] <= 14'b00000000000000;
end

endmodule //tTest_tCalc2_Block_entry12_proc
