// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tTest_sumStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A_TVALID,
        A_TDATA,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TLAST,
        fam_address0,
        fam_ce0,
        fam_we0,
        fam_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   A_TVALID;
input  [31:0] A_TDATA;
output   A_TREADY;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [0:0] A_TLAST;
output  [7:0] fam_address0;
output   fam_ce0;
output   fam_we0;
output  [31:0] fam_d0;
output  [46:0] ap_return_0;
output  [39:0] ap_return_1;

reg ap_idle;
reg fam_ce0;
reg fam_we0;
reg[46:0] ap_return_0;
reg[39:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] in_val_last_fu_120_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_loop_exit_ready_delayed;
reg    A_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [7:0] i_5_reg_211;
reg   [31:0] in_val_data_reg_216;
reg   [0:0] in_val_last_reg_221;
reg   [0:0] in_val_last_reg_221_pp0_iter1_reg;
reg   [0:0] in_val_last_reg_221_pp0_iter2_reg;
wire   [39:0] zext_ln11_fu_140_p1;
reg   [39:0] zext_ln11_reg_225;
reg   [39:0] zext_ln11_reg_225_pp0_iter2_reg;
wire   [39:0] grp_fu_93_p2;
reg   [39:0] mul_ln11_reg_236;
wire   [31:0] zext_ln13_fu_124_p1;
reg   [39:0] tempNumData_fu_56;
wire   [39:0] tempNumData_5_fu_163_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg    ap_loop_init_pp0_iter2_reg;
reg    ap_loop_init_pp0_iter3_reg;
reg   [39:0] ap_sig_allocacmp_tempNumData_4;
reg   [46:0] tempSum_fu_60;
wire   [46:0] tempSum_5_fu_157_p2;
reg   [46:0] ap_sig_allocacmp_tempSum_4;
reg   [7:0] i_fu_64;
wire   [7:0] i_6_fu_129_p2;
reg   [7:0] ap_sig_allocacmp_i_5;
wire   [31:0] grp_fu_93_p0;
wire   [7:0] grp_fu_93_p1;
wire   [46:0] zext_ln11_4_fu_154_p1;
reg    grp_fu_93_ce;
reg   [46:0] ap_return_0_preg;
reg   [39:0] ap_return_1_preg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_A_V_data_V_U_apdone_blk;
wire   [31:0] A_TDATA_int_regslice;
wire    A_TVALID_int_regslice;
reg    A_TREADY_int_regslice;
wire    regslice_both_A_V_data_V_U_ack_in;
wire    regslice_both_A_V_keep_V_U_apdone_blk;
wire   [3:0] A_TKEEP_int_regslice;
wire    regslice_both_A_V_keep_V_U_vld_out;
wire    regslice_both_A_V_keep_V_U_ack_in;
wire    regslice_both_A_V_strb_V_U_apdone_blk;
wire   [3:0] A_TSTRB_int_regslice;
wire    regslice_both_A_V_strb_V_U_vld_out;
wire    regslice_both_A_V_strb_V_U_ack_in;
wire    regslice_both_A_V_last_V_U_apdone_blk;
wire   [0:0] A_TLAST_int_regslice;
wire    regslice_both_A_V_last_V_U_vld_out;
wire    regslice_both_A_V_last_V_U_ack_in;
wire   [39:0] grp_fu_93_p00;
wire   [39:0] grp_fu_93_p10;
reg    ap_condition_160;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
#0 i_5_reg_211 = 8'd0;
#0 in_val_data_reg_216 = 32'd0;
#0 in_val_last_reg_221 = 1'd0;
#0 in_val_last_reg_221_pp0_iter1_reg = 1'd0;
#0 in_val_last_reg_221_pp0_iter2_reg = 1'd0;
#0 zext_ln11_reg_225 = 40'd0;
#0 zext_ln11_reg_225_pp0_iter2_reg = 40'd0;
#0 mul_ln11_reg_236 = 40'd0;
#0 tempNumData_fu_56 = 40'd0;
#0 ap_loop_init_pp0_iter1_reg = 1'b0;
#0 ap_loop_init_pp0_iter2_reg = 1'b0;
#0 ap_loop_init_pp0_iter3_reg = 1'b0;
#0 tempSum_fu_60 = 47'd0;
#0 i_fu_64 = 8'd0;
#0 ap_return_0_preg = 47'd0;
#0 ap_return_1_preg = 40'd0;
#0 ap_loop_exit_ready_pp0_iter1_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter2_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter3_reg = 1'b0;
end

tTest_mul_32ns_8ns_40_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
mul_32ns_8ns_40_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_93_p0),
    .din1(grp_fu_93_p1),
    .ce(grp_fu_93_ce),
    .dout(grp_fu_93_p2)
);

tTest_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

tTest_regslice_both #(
    .DataWidth( 32 ))
regslice_both_A_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TDATA),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_data_V_U_ack_in),
    .data_out(A_TDATA_int_regslice),
    .vld_out(A_TVALID_int_regslice),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_data_V_U_apdone_blk)
);

tTest_regslice_both #(
    .DataWidth( 4 ))
regslice_both_A_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TKEEP),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_keep_V_U_ack_in),
    .data_out(A_TKEEP_int_regslice),
    .vld_out(regslice_both_A_V_keep_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_keep_V_U_apdone_blk)
);

tTest_regslice_both #(
    .DataWidth( 4 ))
regslice_both_A_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TSTRB),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_strb_V_U_ack_in),
    .data_out(A_TSTRB_int_regslice),
    .vld_out(regslice_both_A_V_strb_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_strb_V_U_apdone_blk)
);

tTest_regslice_both #(
    .DataWidth( 1 ))
regslice_both_A_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TLAST),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_last_V_U_ack_in),
    .data_out(A_TLAST_int_regslice),
    .vld_out(regslice_both_A_V_last_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
            ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_pp0_iter1_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_pp0_iter3_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 47'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (in_val_last_reg_221_pp0_iter2_reg == 1'd1))) begin
            ap_return_0_preg <= tempSum_5_fu_157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 40'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (in_val_last_reg_221_pp0_iter2_reg == 1'd1))) begin
            ap_return_1_preg <= tempNumData_5_fu_163_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_5_reg_211 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_5_reg_211 <= ap_sig_allocacmp_i_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_fu_64 <= 8'd0;
    end else begin
        if ((1'b1 == ap_condition_160)) begin
            i_fu_64 <= i_6_fu_129_p2;
        end
end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_val_data_reg_216 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_val_data_reg_216 <= A_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_val_last_reg_221 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_val_last_reg_221 <= A_TLAST_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_val_last_reg_221_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_val_last_reg_221_pp0_iter1_reg <= in_val_last_reg_221;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_val_last_reg_221_pp0_iter2_reg <= 1'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            in_val_last_reg_221_pp0_iter2_reg <= in_val_last_reg_221_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        mul_ln11_reg_236 <= 40'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            mul_ln11_reg_236 <= grp_fu_93_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tempNumData_fu_56 <= 40'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            tempNumData_fu_56 <= tempNumData_5_fu_163_p2;
        end
end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tempSum_fu_60 <= 47'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            tempSum_fu_60 <= tempSum_5_fu_157_p2;
        end
end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                zext_ln11_reg_225[0] <= 1'b0;
        zext_ln11_reg_225[1] <= 1'b0;
        zext_ln11_reg_225[2] <= 1'b0;
        zext_ln11_reg_225[3] <= 1'b0;
        zext_ln11_reg_225[4] <= 1'b0;
        zext_ln11_reg_225[5] <= 1'b0;
        zext_ln11_reg_225[6] <= 1'b0;
        zext_ln11_reg_225[7] <= 1'b0;
        zext_ln11_reg_225[8] <= 1'b0;
        zext_ln11_reg_225[9] <= 1'b0;
        zext_ln11_reg_225[10] <= 1'b0;
        zext_ln11_reg_225[11] <= 1'b0;
        zext_ln11_reg_225[12] <= 1'b0;
        zext_ln11_reg_225[13] <= 1'b0;
        zext_ln11_reg_225[14] <= 1'b0;
        zext_ln11_reg_225[15] <= 1'b0;
        zext_ln11_reg_225[16] <= 1'b0;
        zext_ln11_reg_225[17] <= 1'b0;
        zext_ln11_reg_225[18] <= 1'b0;
        zext_ln11_reg_225[19] <= 1'b0;
        zext_ln11_reg_225[20] <= 1'b0;
        zext_ln11_reg_225[21] <= 1'b0;
        zext_ln11_reg_225[22] <= 1'b0;
        zext_ln11_reg_225[23] <= 1'b0;
        zext_ln11_reg_225[24] <= 1'b0;
        zext_ln11_reg_225[25] <= 1'b0;
        zext_ln11_reg_225[26] <= 1'b0;
        zext_ln11_reg_225[27] <= 1'b0;
        zext_ln11_reg_225[28] <= 1'b0;
        zext_ln11_reg_225[29] <= 1'b0;
        zext_ln11_reg_225[30] <= 1'b0;
        zext_ln11_reg_225[31] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        zext_ln11_reg_225[31 : 0] <= zext_ln11_fu_140_p1[31 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                zext_ln11_reg_225_pp0_iter2_reg[0] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[1] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[2] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[3] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[4] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[5] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[6] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[7] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[8] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[9] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[10] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[11] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[12] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[13] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[14] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[15] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[16] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[17] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[18] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[19] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[20] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[21] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[22] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[23] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[24] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[25] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[26] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[27] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[28] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[29] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[30] <= 1'b0;
        zext_ln11_reg_225_pp0_iter2_reg[31] <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                        zext_ln11_reg_225_pp0_iter2_reg[31 : 0] <= zext_ln11_reg_225[31 : 0];
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TDATA_blk_n = A_TVALID_int_regslice;
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TREADY_int_regslice = 1'b1;
    end else begin
        A_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((in_val_last_fu_120_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (in_val_last_reg_221_pp0_iter2_reg == 1'd1))) begin
        ap_return_0 = tempSum_5_fu_157_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (in_val_last_reg_221_pp0_iter2_reg == 1'd1))) begin
        ap_return_1 = tempNumData_5_fu_163_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_5 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_loop_init_pp0_iter3_reg == 1'b1))) begin
        ap_sig_allocacmp_tempNumData_4 = 40'd0;
    end else begin
        ap_sig_allocacmp_tempNumData_4 = tempNumData_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_loop_init_pp0_iter3_reg == 1'b1))) begin
        ap_sig_allocacmp_tempSum_4 = 47'd0;
    end else begin
        ap_sig_allocacmp_tempSum_4 = tempSum_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fam_ce0 = 1'b1;
    end else begin
        fam_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fam_we0 = 1'b1;
    end else begin
        fam_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_93_ce = 1'b1;
    end else begin
        grp_fu_93_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_TREADY = regslice_both_A_V_data_V_U_ack_in;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (1'b0 == A_TVALID_int_regslice));
end

always @ (*) begin
    ap_condition_160 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign fam_address0 = zext_ln13_fu_124_p1;

assign fam_d0 = A_TDATA_int_regslice;

assign grp_fu_93_p0 = grp_fu_93_p00;

assign grp_fu_93_p00 = in_val_data_reg_216;

assign grp_fu_93_p1 = grp_fu_93_p10;

assign grp_fu_93_p10 = i_5_reg_211;

assign i_6_fu_129_p2 = (ap_sig_allocacmp_i_5 + 8'd1);

assign in_val_last_fu_120_p1 = A_TLAST_int_regslice;

assign tempNumData_5_fu_163_p2 = (zext_ln11_reg_225_pp0_iter2_reg + ap_sig_allocacmp_tempNumData_4);

assign tempSum_5_fu_157_p2 = (zext_ln11_4_fu_154_p1 + ap_sig_allocacmp_tempSum_4);

assign zext_ln11_4_fu_154_p1 = mul_ln11_reg_236;

assign zext_ln11_fu_140_p1 = in_val_data_reg_216;

assign zext_ln13_fu_124_p1 = ap_sig_allocacmp_i_5;

always @ (posedge ap_clk) begin
    zext_ln11_reg_225[39:32] <= 8'b00000000;
    zext_ln11_reg_225_pp0_iter2_reg[39:32] <= 8'b00000000;
end

endmodule //tTest_sumStream
