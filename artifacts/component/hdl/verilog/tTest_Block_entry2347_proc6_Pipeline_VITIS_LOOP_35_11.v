// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tTest_Block_entry2347_proc6_Pipeline_VITIS_LOOP_35_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln35_1,
        famB_address0,
        famB_ce0,
        famB_q0,
        tmpSum_2_out,
        tmpSum_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] zext_ln35_1;
output  [7:0] famB_address0;
output   famB_ce0;
input  [31:0] famB_q0;
output  [62:0] tmpSum_2_out;
output   tmpSum_2_out_ap_vld;

reg ap_idle;
reg famB_ce0;
reg tmpSum_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln35_reg_260;
reg   [0:0] icmp_ln35_reg_260_pp0_iter1_reg;
reg   [0:0] icmp_ln35_reg_260_pp0_iter2_reg;
reg   [16:0] tmp1_reg_264;
reg   [23:0] lshr_ln38_1_reg_274;
reg   [31:0] famB_load_reg_279;
reg   [53:0] tmp_s_reg_294;
wire   [31:0] zext_ln37_fu_141_p1;
wire    ap_block_pp0_stage0;
reg   [62:0] tmpSum_fu_70;
wire   [62:0] tmpSum_1_fu_230_p2;
wire    ap_loop_init;
reg   [8:0] i_3_fu_74;
wire   [8:0] add_ln35_fu_131_p2;
reg   [8:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_104_p0;
wire   [23:0] grp_fu_104_p1;
wire   [7:0] trunc_ln37_fu_137_p1;
wire   [31:0] shl_ln37_1_fu_146_p3;
wire   [32:0] zext_ln37_1_fu_154_p1;
wire   [32:0] zext_ln35_1_cast_fu_108_p1;
wire   [32:0] sub_ln37_fu_158_p2;
wire  signed [16:0] mul_ln38_fu_182_p0;
wire  signed [31:0] sext_ln38_fu_179_p1;
wire  signed [16:0] mul_ln38_fu_182_p1;
wire   [31:0] mul_ln38_fu_182_p2;
wire   [55:0] grp_fu_104_p2;
wire   [55:0] and_ln39_1_fu_219_p3;
wire   [62:0] zext_ln39_fu_226_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [55:0] grp_fu_104_p00;
wire   [55:0] grp_fu_104_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 icmp_ln35_reg_260 = 1'd0;
#0 icmp_ln35_reg_260_pp0_iter1_reg = 1'd0;
#0 icmp_ln35_reg_260_pp0_iter2_reg = 1'd0;
#0 tmp1_reg_264 = 17'd0;
#0 lshr_ln38_1_reg_274 = 24'd0;
#0 famB_load_reg_279 = 32'd0;
#0 tmp_s_reg_294 = 54'd0;
#0 tmpSum_fu_70 = 63'd0;
#0 i_3_fu_74 = 9'd0;
#0 ap_done_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter1_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter2_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter3_reg = 1'b0;
end

tTest_mul_32ns_24ns_56_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 56 ))
mul_32ns_24ns_56_2_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_104_p0),
    .din1(grp_fu_104_p1),
    .ce(1'b1),
    .dout(grp_fu_104_p2)
);

tTest_mul_17s_17s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_17s_17s_32_1_1_U32(
    .din0(mul_ln38_fu_182_p0),
    .din1(mul_ln38_fu_182_p1),
    .dout(mul_ln38_fu_182_p2)
);

tTest_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        famB_load_reg_279 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            famB_load_reg_279 <= famB_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_3_fu_74 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if (((icmp_ln35_fu_125_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                i_3_fu_74 <= add_ln35_fu_131_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                i_3_fu_74 <= 9'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln35_reg_260 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln35_reg_260 <= icmp_ln35_fu_125_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln35_reg_260_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln35_reg_260_pp0_iter1_reg <= icmp_ln35_reg_260;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln35_reg_260_pp0_iter2_reg <= 1'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            icmp_ln35_reg_260_pp0_iter2_reg <= icmp_ln35_reg_260_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lshr_ln38_1_reg_274 <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lshr_ln38_1_reg_274 <= {{mul_ln38_fu_182_p2[31:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp1_reg_264 <= 17'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp1_reg_264 <= {{sub_ln37_fu_158_p2[32:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmpSum_fu_70 <= 63'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
                tmpSum_fu_70 <= 63'd0;
            end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
                tmpSum_fu_70 <= tmpSum_1_fu_230_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_s_reg_294 <= 54'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            tmp_s_reg_294 <= {{grp_fu_104_p2[55:2]}};
        end
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_125_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 9'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        famB_ce0 = 1'b1;
    end else begin
        famB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_260_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmpSum_2_out_ap_vld = 1'b1;
    end else begin
        tmpSum_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_131_p2 = (ap_sig_allocacmp_i + 9'd1);

assign and_ln39_1_fu_219_p3 = {{tmp_s_reg_294}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign famB_address0 = zext_ln37_fu_141_p1;

assign grp_fu_104_p0 = grp_fu_104_p00;

assign grp_fu_104_p00 = famB_load_reg_279;

assign grp_fu_104_p1 = grp_fu_104_p10;

assign grp_fu_104_p10 = lshr_ln38_1_reg_274;

assign icmp_ln35_fu_125_p2 = ((ap_sig_allocacmp_i == 9'd256) ? 1'b1 : 1'b0);

assign mul_ln38_fu_182_p0 = sext_ln38_fu_179_p1;

assign mul_ln38_fu_182_p1 = sext_ln38_fu_179_p1;

assign sext_ln38_fu_179_p1 = $signed(tmp1_reg_264);

assign shl_ln37_1_fu_146_p3 = {{trunc_ln37_fu_137_p1}, {24'd0}};

assign sub_ln37_fu_158_p2 = (zext_ln37_1_fu_154_p1 - zext_ln35_1_cast_fu_108_p1);

assign tmpSum_1_fu_230_p2 = (zext_ln39_fu_226_p1 + tmpSum_fu_70);

assign tmpSum_2_out = tmpSum_fu_70;

assign trunc_ln37_fu_137_p1 = ap_sig_allocacmp_i[7:0];

assign zext_ln35_1_cast_fu_108_p1 = zext_ln35_1;

assign zext_ln37_1_fu_154_p1 = shl_ln37_1_fu_146_p3;

assign zext_ln37_fu_141_p1 = trunc_ln37_fu_137_p1;

assign zext_ln39_fu_226_p1 = and_ln39_1_fu_219_p3;

endmodule //tTest_Block_entry2347_proc6_Pipeline_VITIS_LOOP_35_11
