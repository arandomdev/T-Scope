-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tTest_Block_entry2347_proc6_Pipeline_VITIS_LOOP_35_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln35 : IN STD_LOGIC_VECTOR (31 downto 0);
    famA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    famA_ce0 : OUT STD_LOGIC;
    famA_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmpSum_out : OUT STD_LOGIC_VECTOR (62 downto 0);
    tmpSum_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tTest_Block_entry2347_proc6_Pipeline_VITIS_LOOP_35_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln35_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_reg_260 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmp_ln35_reg_260_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmp_ln35_reg_260_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp1_reg_264 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal lshr_ln_reg_274 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal famA_load_reg_279 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_9_reg_294 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    signal zext_ln37_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmpSum_fu_70 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal tmpSum_2_fu_230_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_74 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln35_fu_131_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_i_6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_104_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln37_fu_137_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_146_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_1_fu_154_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln35_cast_fu_108_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln37_fu_158_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln38_fu_182_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln38_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_fu_182_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln38_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal and_ln_fu_219_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln39_fu_226_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC := '0';
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_104_p00 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_104_p10 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tTest_mul_32ns_24ns_56_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component tTest_mul_17s_17s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tTest_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_24ns_56_2_1_U24 : component tTest_mul_32ns_24ns_56_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_104_p0,
        din1 => grp_fu_104_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_104_p2);

    mul_17s_17s_32_1_1_U25 : component tTest_mul_17s_17s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln38_fu_182_p0,
        din1 => mul_ln38_fu_182_p1,
        dout => mul_ln38_fu_182_p2);

    flow_control_loop_pipe_sequential_init_U : component tTest_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    famA_load_reg_279_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                famA_load_reg_279 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    famA_load_reg_279 <= famA_q0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                i_fu_74 <= ap_const_lv9_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln35_fu_125_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        i_fu_74 <= add_ln35_fu_131_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        i_fu_74 <= ap_const_lv9_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln35_reg_260_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln35_reg_260 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln35_reg_260 <= icmp_ln35_fu_125_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln35_reg_260_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln35_reg_260_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln35_reg_260_pp0_iter1_reg <= icmp_ln35_reg_260;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln35_reg_260_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln35_reg_260_pp0_iter2_reg <= ap_const_lv1_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    icmp_ln35_reg_260_pp0_iter2_reg <= icmp_ln35_reg_260_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    lshr_ln_reg_274_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                lshr_ln_reg_274 <= ap_const_lv24_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lshr_ln_reg_274 <= mul_ln38_fu_182_p2(31 downto 8);
                end if; 
            end if;
        end if;
    end process;


    tmp1_reg_264_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp1_reg_264 <= ap_const_lv17_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_reg_264 <= sub_ln37_fu_158_p2(32 downto 16);
                end if; 
            end if;
        end if;
    end process;


    tmpSum_fu_70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmpSum_fu_70 <= ap_const_lv63_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                        tmpSum_fu_70 <= ap_const_lv63_0;
                    elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                        tmpSum_fu_70 <= tmpSum_2_fu_230_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    tmp_9_reg_294_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_9_reg_294 <= ap_const_lv54_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    tmp_9_reg_294 <= grp_fu_104_p2(55 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln35_fu_131_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_6) + unsigned(ap_const_lv9_1));
    and_ln_fu_219_p3 <= (tmp_9_reg_294 & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln35_fu_125_p2)
    begin
        if (((icmp_ln35_fu_125_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_6 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_6 <= i_fu_74;
        end if; 
    end process;

    famA_address0 <= zext_ln37_fu_141_p1(8 - 1 downto 0);

    famA_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            famA_ce0 <= ap_const_logic_1;
        else 
            famA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_104_p0 <= grp_fu_104_p00(32 - 1 downto 0);
    grp_fu_104_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(famA_load_reg_279),56));
    grp_fu_104_p1 <= grp_fu_104_p10(24 - 1 downto 0);
    grp_fu_104_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_274),56));
    icmp_ln35_fu_125_p2 <= "1" when (ap_sig_allocacmp_i_6 = ap_const_lv9_100) else "0";
    mul_ln38_fu_182_p0 <= sext_ln38_fu_179_p1(17 - 1 downto 0);
    mul_ln38_fu_182_p1 <= sext_ln38_fu_179_p1(17 - 1 downto 0);
        sext_ln38_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_264),32));

    shl_ln1_fu_146_p3 <= (trunc_ln37_fu_137_p1 & ap_const_lv24_0);
    sub_ln37_fu_158_p2 <= std_logic_vector(unsigned(zext_ln37_1_fu_154_p1) - unsigned(zext_ln35_cast_fu_108_p1));
    tmpSum_2_fu_230_p2 <= std_logic_vector(unsigned(zext_ln39_fu_226_p1) + unsigned(tmpSum_fu_70));
    tmpSum_out <= tmpSum_fu_70;

    tmpSum_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln35_reg_260_pp0_iter2_reg)
    begin
        if (((icmp_ln35_reg_260_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmpSum_out_ap_vld <= ap_const_logic_1;
        else 
            tmpSum_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln37_fu_137_p1 <= ap_sig_allocacmp_i_6(8 - 1 downto 0);
    zext_ln35_cast_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln35),33));
    zext_ln37_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_146_p3),33));
    zext_ln37_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln37_fu_137_p1),32));
    zext_ln39_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_219_p3),63));
end behav;
