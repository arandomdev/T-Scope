-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tTest_sumStream_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_TVALID : IN STD_LOGIC;
    B_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    B_TREADY : OUT STD_LOGIC;
    B_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    B_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    fam_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fam_ce0 : OUT STD_LOGIC;
    fam_we0 : OUT STD_LOGIC;
    fam_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (46 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of tTest_sumStream_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv47_0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal in_val_last_fu_120_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC := '0';
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC := '0';
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal B_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_2_reg_211 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal in_val_data_reg_216 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_val_last_reg_221 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal in_val_last_reg_221_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal in_val_last_reg_221_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln11_fu_140_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln11_reg_225 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal zext_ln11_reg_225_pp0_iter2_reg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln11_reg_236 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal zext_ln13_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempNumData_fu_56 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal tempNumData_3_fu_163_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_loop_init_pp0_iter2_reg : STD_LOGIC := '0';
    signal ap_loop_init_pp0_iter3_reg : STD_LOGIC := '0';
    signal ap_sig_allocacmp_tempNumData_2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tempSum_fu_60 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    signal tempSum_3_fu_157_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_sig_allocacmp_tempSum_2 : STD_LOGIC_VECTOR (46 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_3_fu_129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_93_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln11_2_fu_154_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_93_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC := '0';
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal regslice_both_B_V_data_V_U_apdone_blk : STD_LOGIC;
    signal B_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal B_TVALID_int_regslice : STD_LOGIC;
    signal B_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_B_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_B_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal B_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_B_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_B_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_B_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal B_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_B_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_B_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_B_V_last_V_U_apdone_blk : STD_LOGIC;
    signal B_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_B_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_B_V_last_V_U_ack_in : STD_LOGIC;
    signal grp_fu_93_p00 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_93_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_condition_160 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component tTest_mul_32ns_8ns_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component tTest_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;


    component tTest_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_32ns_8ns_40_2_1_U14 : component tTest_mul_32ns_8ns_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_93_p0,
        din1 => grp_fu_93_p1,
        ce => grp_fu_93_ce,
        dout => grp_fu_93_p2);

    flow_control_loop_delay_pipe_U : component tTest_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);

    regslice_both_B_V_data_V_U : component tTest_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => B_TDATA,
        vld_in => B_TVALID,
        ack_in => regslice_both_B_V_data_V_U_ack_in,
        data_out => B_TDATA_int_regslice,
        vld_out => B_TVALID_int_regslice,
        ack_out => B_TREADY_int_regslice,
        apdone_blk => regslice_both_B_V_data_V_U_apdone_blk);

    regslice_both_B_V_keep_V_U : component tTest_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => B_TKEEP,
        vld_in => B_TVALID,
        ack_in => regslice_both_B_V_keep_V_U_ack_in,
        data_out => B_TKEEP_int_regslice,
        vld_out => regslice_both_B_V_keep_V_U_vld_out,
        ack_out => B_TREADY_int_regslice,
        apdone_blk => regslice_both_B_V_keep_V_U_apdone_blk);

    regslice_both_B_V_strb_V_U : component tTest_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => B_TSTRB,
        vld_in => B_TVALID,
        ack_in => regslice_both_B_V_strb_V_U_ack_in,
        data_out => B_TSTRB_int_regslice,
        vld_out => regslice_both_B_V_strb_V_U_vld_out,
        ack_out => B_TREADY_int_regslice,
        apdone_blk => regslice_both_B_V_strb_V_U_apdone_blk);

    regslice_both_B_V_last_V_U : component tTest_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => B_TLAST,
        vld_in => B_TVALID,
        ack_in => regslice_both_B_V_last_V_U_ack_in,
        data_out => B_TLAST_int_regslice,
        vld_out => regslice_both_B_V_last_V_U_vld_out,
        ack_out => B_TREADY_int_regslice,
        apdone_blk => regslice_both_B_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                end if; 
            end if;
        end if;
    end process;


    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                    ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_init_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_init_pp0_iter1_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_init_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_init_pp0_iter2_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_init_pp0_iter3_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_init_pp0_iter3_reg <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv47_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_val_last_reg_221_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_return_0_preg <= tempSum_3_fu_157_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv40_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_val_last_reg_221_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_return_1_preg <= tempNumData_3_fu_163_p2;
                end if; 
            end if;
        end if;
    end process;


    i_2_reg_211_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                i_2_reg_211 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_2_reg_211 <= ap_sig_allocacmp_i_2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                i_fu_64 <= ap_const_lv8_0;
            else
                if ((ap_const_boolean_1 = ap_condition_160)) then
                    i_fu_64 <= i_3_fu_129_p2;
                end if;
            end if;
        end if;
    end process;


    in_val_data_reg_216_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_val_data_reg_216 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    in_val_data_reg_216 <= B_TDATA_int_regslice;
                end if; 
            end if;
        end if;
    end process;


    in_val_last_reg_221_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_val_last_reg_221 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    in_val_last_reg_221 <= B_TLAST_int_regslice;
                end if; 
            end if;
        end if;
    end process;


    in_val_last_reg_221_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_val_last_reg_221_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    in_val_last_reg_221_pp0_iter1_reg <= in_val_last_reg_221;
                end if; 
            end if;
        end if;
    end process;


    in_val_last_reg_221_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_val_last_reg_221_pp0_iter2_reg <= ap_const_lv1_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    in_val_last_reg_221_pp0_iter2_reg <= in_val_last_reg_221_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    mul_ln11_reg_236_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                mul_ln11_reg_236 <= ap_const_lv40_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    mul_ln11_reg_236 <= grp_fu_93_p2;
                end if; 
            end if;
        end if;
    end process;


    tempNumData_fu_56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tempNumData_fu_56 <= ap_const_lv40_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    tempNumData_fu_56 <= tempNumData_3_fu_163_p2;
                end if;
            end if;
        end if;
    end process;


    tempSum_fu_60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tempSum_fu_60 <= ap_const_lv47_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    tempSum_fu_60 <= tempSum_3_fu_157_p2;
                end if;
            end if;
        end if;
    end process;


    zext_ln11_reg_225_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                zext_ln11_reg_225(0) <= '0';
                zext_ln11_reg_225(1) <= '0';
                zext_ln11_reg_225(2) <= '0';
                zext_ln11_reg_225(3) <= '0';
                zext_ln11_reg_225(4) <= '0';
                zext_ln11_reg_225(5) <= '0';
                zext_ln11_reg_225(6) <= '0';
                zext_ln11_reg_225(7) <= '0';
                zext_ln11_reg_225(8) <= '0';
                zext_ln11_reg_225(9) <= '0';
                zext_ln11_reg_225(10) <= '0';
                zext_ln11_reg_225(11) <= '0';
                zext_ln11_reg_225(12) <= '0';
                zext_ln11_reg_225(13) <= '0';
                zext_ln11_reg_225(14) <= '0';
                zext_ln11_reg_225(15) <= '0';
                zext_ln11_reg_225(16) <= '0';
                zext_ln11_reg_225(17) <= '0';
                zext_ln11_reg_225(18) <= '0';
                zext_ln11_reg_225(19) <= '0';
                zext_ln11_reg_225(20) <= '0';
                zext_ln11_reg_225(21) <= '0';
                zext_ln11_reg_225(22) <= '0';
                zext_ln11_reg_225(23) <= '0';
                zext_ln11_reg_225(24) <= '0';
                zext_ln11_reg_225(25) <= '0';
                zext_ln11_reg_225(26) <= '0';
                zext_ln11_reg_225(27) <= '0';
                zext_ln11_reg_225(28) <= '0';
                zext_ln11_reg_225(29) <= '0';
                zext_ln11_reg_225(30) <= '0';
                zext_ln11_reg_225(31) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        zext_ln11_reg_225(31 downto 0) <= zext_ln11_fu_140_p1(31 downto 0);
                end if; 
            end if;
        end if;
    end process;


    zext_ln11_reg_225_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                zext_ln11_reg_225_pp0_iter2_reg(0) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(1) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(2) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(3) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(4) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(5) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(6) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(7) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(8) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(9) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(10) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(11) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(12) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(13) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(14) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(15) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(16) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(17) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(18) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(19) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(20) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(21) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(22) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(23) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(24) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(25) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(26) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(27) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(28) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(29) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(30) <= '0';
                zext_ln11_reg_225_pp0_iter2_reg(31) <= '0';
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                                        zext_ln11_reg_225_pp0_iter2_reg(31 downto 0) <= zext_ln11_reg_225(31 downto 0);
                end if; 
            end if;
        end if;
    end process;

    zext_ln11_reg_225(39 downto 32) <= "00000000";
    zext_ln11_reg_225_pp0_iter2_reg(39 downto 32) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    B_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0, ap_start_int, B_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_TDATA_blk_n <= B_TVALID_int_regslice;
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TREADY <= regslice_both_B_V_data_V_U_ack_in;

    B_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_TREADY_int_regslice <= ap_const_logic_1;
        else 
            B_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg, B_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = B_TVALID_int_regslice));
    end process;


    ap_condition_160_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_160 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, in_val_last_fu_120_p1, ap_start_int)
    begin
        if (((in_val_last_fu_120_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_block_pp0_stage0_11001, in_val_last_reg_221_pp0_iter2_reg, tempSum_3_fu_157_p2, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_val_last_reg_221_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_return_0 <= tempSum_3_fu_157_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_block_pp0_stage0_11001, in_val_last_reg_221_pp0_iter2_reg, tempNumData_3_fu_163_p2, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_val_last_reg_221_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_return_1 <= tempNumData_3_fu_163_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_tempNumData_2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, tempNumData_fu_56, ap_loop_init_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_loop_init_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_sig_allocacmp_tempNumData_2 <= ap_const_lv40_0;
        else 
            ap_sig_allocacmp_tempNumData_2 <= tempNumData_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_tempSum_2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_loop_init_pp0_iter3_reg, tempSum_fu_60)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_loop_init_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_sig_allocacmp_tempSum_2 <= ap_const_lv47_0;
        else 
            ap_sig_allocacmp_tempSum_2 <= tempSum_fu_60;
        end if; 
    end process;

    fam_address0 <= zext_ln13_fu_124_p1(8 - 1 downto 0);

    fam_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fam_ce0 <= ap_const_logic_1;
        else 
            fam_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fam_d0 <= B_TDATA_int_regslice;

    fam_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fam_we0 <= ap_const_logic_1;
        else 
            fam_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_93_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_93_ce <= ap_const_logic_1;
        else 
            grp_fu_93_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_93_p0 <= grp_fu_93_p00(32 - 1 downto 0);
    grp_fu_93_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_val_data_reg_216),40));
    grp_fu_93_p1 <= grp_fu_93_p10(8 - 1 downto 0);
    grp_fu_93_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_211),40));
    i_3_fu_129_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv8_1));
    in_val_last_fu_120_p1 <= B_TLAST_int_regslice;
    tempNumData_3_fu_163_p2 <= std_logic_vector(unsigned(zext_ln11_reg_225_pp0_iter2_reg) + unsigned(ap_sig_allocacmp_tempNumData_2));
    tempSum_3_fu_157_p2 <= std_logic_vector(unsigned(zext_ln11_2_fu_154_p1) + unsigned(ap_sig_allocacmp_tempSum_2));
    zext_ln11_2_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln11_reg_236),47));
    zext_ln11_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_val_data_reg_216),40));
    zext_ln13_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),32));
end behav;
