-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tTest_tCalc1_2_Block_entry4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    numDataA_dout : IN STD_LOGIC_VECTOR (39 downto 0);
    numDataA_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    numDataA_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    numDataA_empty_n : IN STD_LOGIC;
    numDataA_read : OUT STD_LOGIC;
    numDataA_c_din : OUT STD_LOGIC_VECTOR (39 downto 0);
    numDataA_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    numDataA_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    numDataA_c_full_n : IN STD_LOGIC;
    numDataA_c_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of tTest_tCalc1_2_Block_entry4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv40_FFFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111111111111";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal numDataA_blk_n : STD_LOGIC;
    signal numDataA_c_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal add_ln50_fu_40_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv40_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_preg <= add_ln50_fu_40_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_fu_40_p2 <= std_logic_vector(unsigned(numDataA_dout) + unsigned(ap_const_lv40_FFFFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, numDataA_empty_n, numDataA_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (numDataA_c_full_n = ap_const_logic_0) or (numDataA_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, add_ln50_fu_40_p2, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return <= add_ln50_fu_40_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    numDataA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numDataA_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numDataA_blk_n <= numDataA_empty_n;
        else 
            numDataA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    numDataA_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numDataA_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numDataA_c_blk_n <= numDataA_c_full_n;
        else 
            numDataA_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    numDataA_c_din <= numDataA_dout;

    numDataA_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numDataA_c_write <= ap_const_logic_1;
        else 
            numDataA_c_write <= ap_const_logic_0;
        end if; 
    end process;


    numDataA_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numDataA_read <= ap_const_logic_1;
        else 
            numDataA_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
