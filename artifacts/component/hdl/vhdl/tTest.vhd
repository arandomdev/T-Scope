-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tTest is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    B_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    B_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    B_TVALID : IN STD_LOGIC;
    B_TREADY : OUT STD_LOGIC );
end;


architecture behav of tTest is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tTest_tTest,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=10693,HLS_SYN_LUT=11307,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal famA_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal famA_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal famB_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal famB_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_C_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_C_c_write : STD_LOGIC;
    signal sumStream_U0_ap_start : STD_LOGIC;
    signal sumStream_U0_ap_done : STD_LOGIC;
    signal sumStream_U0_ap_continue : STD_LOGIC;
    signal sumStream_U0_ap_idle : STD_LOGIC;
    signal sumStream_U0_ap_ready : STD_LOGIC;
    signal sumStream_U0_A_TREADY : STD_LOGIC;
    signal sumStream_U0_fam_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sumStream_U0_fam_ce0 : STD_LOGIC;
    signal sumStream_U0_fam_we0 : STD_LOGIC;
    signal sumStream_U0_fam_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumStream_U0_ap_return_0 : STD_LOGIC_VECTOR (46 downto 0);
    signal sumStream_U0_ap_return_1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_channel_done_numDataA_channel : STD_LOGIC;
    signal numDataA_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_numDataA_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_numDataA_channel : STD_LOGIC;
    signal ap_channel_done_sumA_channel : STD_LOGIC;
    signal sumA_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sumA_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_sumA_channel : STD_LOGIC;
    signal ap_channel_done_famA : STD_LOGIC;
    signal sumStream_U0_fam_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_famA : STD_LOGIC := '0';
    signal ap_sync_channel_write_famA : STD_LOGIC;
    signal sumStream_1_U0_ap_start : STD_LOGIC;
    signal sumStream_1_U0_ap_done : STD_LOGIC;
    signal sumStream_1_U0_ap_continue : STD_LOGIC;
    signal sumStream_1_U0_ap_idle : STD_LOGIC;
    signal sumStream_1_U0_ap_ready : STD_LOGIC;
    signal sumStream_1_U0_B_TREADY : STD_LOGIC;
    signal sumStream_1_U0_fam_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sumStream_1_U0_fam_ce0 : STD_LOGIC;
    signal sumStream_1_U0_fam_we0 : STD_LOGIC;
    signal sumStream_1_U0_fam_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumStream_1_U0_ap_return_0 : STD_LOGIC_VECTOR (46 downto 0);
    signal sumStream_1_U0_ap_return_1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_channel_done_numDataB_channel : STD_LOGIC;
    signal numDataB_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_numDataB_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_numDataB_channel : STD_LOGIC;
    signal ap_channel_done_sumB_channel : STD_LOGIC;
    signal sumB_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sumB_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_sumB_channel : STD_LOGIC;
    signal ap_channel_done_famB : STD_LOGIC;
    signal sumStream_1_U0_fam_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_famB : STD_LOGIC := '0';
    signal ap_sync_channel_write_famB : STD_LOGIC;
    signal Block_entry2347_proc6_U0_ap_start : STD_LOGIC;
    signal Block_entry2347_proc6_U0_ap_done : STD_LOGIC;
    signal Block_entry2347_proc6_U0_ap_continue : STD_LOGIC;
    signal Block_entry2347_proc6_U0_ap_idle : STD_LOGIC;
    signal Block_entry2347_proc6_U0_ap_ready : STD_LOGIC;
    signal Block_entry2347_proc6_U0_C_read : STD_LOGIC;
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal Block_entry2347_proc6_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal Block_entry2347_proc6_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry2347_proc6_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal Block_entry2347_proc6_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal Block_entry2347_proc6_U0_famA_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry2347_proc6_U0_famA_ce0 : STD_LOGIC;
    signal Block_entry2347_proc6_U0_famB_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry2347_proc6_U0_famB_ce0 : STD_LOGIC;
    signal famA_i_full_n : STD_LOGIC;
    signal famA_t_empty_n : STD_LOGIC;
    signal famB_i_full_n : STD_LOGIC;
    signal famB_t_empty_n : STD_LOGIC;
    signal C_c_full_n : STD_LOGIC;
    signal C_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal C_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal C_c_empty_n : STD_LOGIC;
    signal sumA_channel_dout : STD_LOGIC_VECTOR (46 downto 0);
    signal sumA_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal sumA_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal sumA_channel_empty_n : STD_LOGIC;
    signal numDataA_channel_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal numDataA_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal numDataA_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal numDataA_channel_empty_n : STD_LOGIC;
    signal sumB_channel_dout : STD_LOGIC_VECTOR (46 downto 0);
    signal sumB_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal sumB_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal sumB_channel_empty_n : STD_LOGIC;
    signal numDataB_channel_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal numDataB_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal numDataB_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal numDataB_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_sumStream_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_sumStream_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_sumStream_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_sumStream_1_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tTest_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C : IN STD_LOGIC_VECTOR (31 downto 0);
        C_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        C_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        C_c_full_n : IN STD_LOGIC;
        C_c_write : OUT STD_LOGIC );
    end component;


    component tTest_sumStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_TVALID : IN STD_LOGIC;
        A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        A_TREADY : OUT STD_LOGIC;
        A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        fam_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fam_ce0 : OUT STD_LOGIC;
        fam_we0 : OUT STD_LOGIC;
        fam_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (46 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component tTest_sumStream_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_TVALID : IN STD_LOGIC;
        B_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        B_TREADY : OUT STD_LOGIC;
        B_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        B_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        B_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        fam_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fam_ce0 : OUT STD_LOGIC;
        fam_we0 : OUT STD_LOGIC;
        fam_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (46 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component tTest_Block_entry2347_proc6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (39 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (39 downto 0);
        C_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        C_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        C_empty_n : IN STD_LOGIC;
        C_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (46 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (46 downto 0);
        famA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        famA_ce0 : OUT STD_LOGIC;
        famA_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        famB_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        famB_ce0 : OUT STD_LOGIC;
        famB_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tTest_famA_RAM_1WNR_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component tTest_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tTest_fifo_w47_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (46 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (46 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tTest_fifo_w40_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (39 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (39 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tTest_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        C : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component tTest_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    famA_U : component tTest_famA_RAM_1WNR_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => sumStream_U0_fam_address0,
        i_ce0 => sumStream_U0_fam_ce0,
        i_we0 => sumStream_U0_fam_we0,
        i_d0 => sumStream_U0_fam_d0,
        i_q0 => famA_i_q0,
        t_address0 => Block_entry2347_proc6_U0_famA_address0,
        t_ce0 => Block_entry2347_proc6_U0_famA_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => famA_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => famA_i_full_n,
        i_write => ap_channel_done_famA,
        t_empty_n => famA_t_empty_n,
        t_read => Block_entry2347_proc6_U0_ap_ready);

    famB_U : component tTest_famA_RAM_1WNR_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => sumStream_1_U0_fam_address0,
        i_ce0 => sumStream_1_U0_fam_ce0,
        i_we0 => sumStream_1_U0_fam_we0,
        i_d0 => sumStream_1_U0_fam_d0,
        i_q0 => famB_i_q0,
        t_address0 => Block_entry2347_proc6_U0_famB_address0,
        t_ce0 => Block_entry2347_proc6_U0_famB_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => famB_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => famB_i_full_n,
        i_write => ap_channel_done_famB,
        t_empty_n => famB_t_empty_n,
        t_read => Block_entry2347_proc6_U0_ap_ready);

    control_s_axi_U : component tTest_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        C => C,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component tTest_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 1,
        MAX_WRITE_BURST_LENGTH => 1,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 2,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 1,
        NUM_WRITE_OUTSTANDING => 1)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => Block_entry2347_proc6_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => Block_entry2347_proc6_U0_m_axi_gmem_AWADDR,
        I_AWLEN => Block_entry2347_proc6_U0_m_axi_gmem_AWLEN,
        I_WVALID => Block_entry2347_proc6_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => Block_entry2347_proc6_U0_m_axi_gmem_WDATA,
        I_WSTRB => Block_entry2347_proc6_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => Block_entry2347_proc6_U0_m_axi_gmem_BREADY);

    entry_proc_U0 : component tTest_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        C => C,
        C_c_din => entry_proc_U0_C_c_din,
        C_c_num_data_valid => C_c_num_data_valid,
        C_c_fifo_cap => C_c_fifo_cap,
        C_c_full_n => C_c_full_n,
        C_c_write => entry_proc_U0_C_c_write);

    sumStream_U0 : component tTest_sumStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sumStream_U0_ap_start,
        ap_done => sumStream_U0_ap_done,
        ap_continue => sumStream_U0_ap_continue,
        ap_idle => sumStream_U0_ap_idle,
        ap_ready => sumStream_U0_ap_ready,
        A_TVALID => A_TVALID,
        A_TDATA => A_TDATA,
        A_TREADY => sumStream_U0_A_TREADY,
        A_TKEEP => A_TKEEP,
        A_TSTRB => A_TSTRB,
        A_TLAST => A_TLAST,
        fam_address0 => sumStream_U0_fam_address0,
        fam_ce0 => sumStream_U0_fam_ce0,
        fam_we0 => sumStream_U0_fam_we0,
        fam_d0 => sumStream_U0_fam_d0,
        ap_return_0 => sumStream_U0_ap_return_0,
        ap_return_1 => sumStream_U0_ap_return_1);

    sumStream_1_U0 : component tTest_sumStream_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sumStream_1_U0_ap_start,
        ap_done => sumStream_1_U0_ap_done,
        ap_continue => sumStream_1_U0_ap_continue,
        ap_idle => sumStream_1_U0_ap_idle,
        ap_ready => sumStream_1_U0_ap_ready,
        B_TVALID => B_TVALID,
        B_TDATA => B_TDATA,
        B_TREADY => sumStream_1_U0_B_TREADY,
        B_TKEEP => B_TKEEP,
        B_TSTRB => B_TSTRB,
        B_TLAST => B_TLAST,
        fam_address0 => sumStream_1_U0_fam_address0,
        fam_ce0 => sumStream_1_U0_fam_ce0,
        fam_we0 => sumStream_1_U0_fam_we0,
        fam_d0 => sumStream_1_U0_fam_d0,
        ap_return_0 => sumStream_1_U0_ap_return_0,
        ap_return_1 => sumStream_1_U0_ap_return_1);

    Block_entry2347_proc6_U0 : component tTest_Block_entry2347_proc6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry2347_proc6_U0_ap_start,
        ap_done => Block_entry2347_proc6_U0_ap_done,
        ap_continue => Block_entry2347_proc6_U0_ap_continue,
        ap_idle => Block_entry2347_proc6_U0_ap_idle,
        ap_ready => Block_entry2347_proc6_U0_ap_ready,
        p_read => numDataA_channel_dout,
        p_read1 => numDataB_channel_dout,
        C_dout => C_c_dout,
        C_num_data_valid => C_c_num_data_valid,
        C_fifo_cap => C_c_fifo_cap,
        C_empty_n => C_c_empty_n,
        C_read => Block_entry2347_proc6_U0_C_read,
        m_axi_gmem_AWVALID => Block_entry2347_proc6_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => Block_entry2347_proc6_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => Block_entry2347_proc6_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => Block_entry2347_proc6_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => Block_entry2347_proc6_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => Block_entry2347_proc6_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => Block_entry2347_proc6_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => Block_entry2347_proc6_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => Block_entry2347_proc6_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => Block_entry2347_proc6_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => Block_entry2347_proc6_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => Block_entry2347_proc6_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => Block_entry2347_proc6_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => Block_entry2347_proc6_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => Block_entry2347_proc6_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => Block_entry2347_proc6_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => Block_entry2347_proc6_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => Block_entry2347_proc6_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => Block_entry2347_proc6_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => Block_entry2347_proc6_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => Block_entry2347_proc6_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => Block_entry2347_proc6_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => Block_entry2347_proc6_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => Block_entry2347_proc6_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => Block_entry2347_proc6_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => Block_entry2347_proc6_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => Block_entry2347_proc6_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => Block_entry2347_proc6_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => Block_entry2347_proc6_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => Block_entry2347_proc6_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => Block_entry2347_proc6_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv2_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => Block_entry2347_proc6_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        p_read2 => sumA_channel_dout,
        p_read3 => sumB_channel_dout,
        famA_address0 => Block_entry2347_proc6_U0_famA_address0,
        famA_ce0 => Block_entry2347_proc6_U0_famA_ce0,
        famA_q0 => famA_t_q0,
        famB_address0 => Block_entry2347_proc6_U0_famB_address0,
        famB_ce0 => Block_entry2347_proc6_U0_famB_ce0,
        famB_q0 => famB_t_q0);

    C_c_U : component tTest_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_C_c_din,
        if_full_n => C_c_full_n,
        if_write => entry_proc_U0_C_c_write,
        if_dout => C_c_dout,
        if_num_data_valid => C_c_num_data_valid,
        if_fifo_cap => C_c_fifo_cap,
        if_empty_n => C_c_empty_n,
        if_read => Block_entry2347_proc6_U0_C_read);

    sumA_channel_U : component tTest_fifo_w47_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sumStream_U0_ap_return_0,
        if_full_n => sumA_channel_full_n,
        if_write => ap_channel_done_sumA_channel,
        if_dout => sumA_channel_dout,
        if_num_data_valid => sumA_channel_num_data_valid,
        if_fifo_cap => sumA_channel_fifo_cap,
        if_empty_n => sumA_channel_empty_n,
        if_read => Block_entry2347_proc6_U0_ap_ready);

    numDataA_channel_U : component tTest_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sumStream_U0_ap_return_1,
        if_full_n => numDataA_channel_full_n,
        if_write => ap_channel_done_numDataA_channel,
        if_dout => numDataA_channel_dout,
        if_num_data_valid => numDataA_channel_num_data_valid,
        if_fifo_cap => numDataA_channel_fifo_cap,
        if_empty_n => numDataA_channel_empty_n,
        if_read => Block_entry2347_proc6_U0_ap_ready);

    sumB_channel_U : component tTest_fifo_w47_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sumStream_1_U0_ap_return_0,
        if_full_n => sumB_channel_full_n,
        if_write => ap_channel_done_sumB_channel,
        if_dout => sumB_channel_dout,
        if_num_data_valid => sumB_channel_num_data_valid,
        if_fifo_cap => sumB_channel_fifo_cap,
        if_empty_n => sumB_channel_empty_n,
        if_read => Block_entry2347_proc6_U0_ap_ready);

    numDataB_channel_U : component tTest_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sumStream_1_U0_ap_return_1,
        if_full_n => numDataB_channel_full_n,
        if_write => ap_channel_done_numDataB_channel,
        if_dout => numDataB_channel_dout,
        if_num_data_valid => numDataB_channel_num_data_valid,
        if_fifo_cap => numDataB_channel_fifo_cap,
        if_empty_n => numDataB_channel_empty_n,
        if_read => Block_entry2347_proc6_U0_ap_ready);





    ap_sync_reg_channel_write_famA_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_famA <= ap_const_logic_0;
            else
                if (((sumStream_U0_ap_done and sumStream_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_famA <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_famA <= ap_sync_channel_write_famA;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_famB_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_famB <= ap_const_logic_0;
            else
                if (((sumStream_1_U0_ap_done and sumStream_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_famB <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_famB <= ap_sync_channel_write_famB;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_numDataA_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_numDataA_channel <= ap_const_logic_0;
            else
                if (((sumStream_U0_ap_done and sumStream_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_numDataA_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_numDataA_channel <= ap_sync_channel_write_numDataA_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_numDataB_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_numDataB_channel <= ap_const_logic_0;
            else
                if (((sumStream_1_U0_ap_done and sumStream_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_numDataB_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_numDataB_channel <= ap_sync_channel_write_numDataB_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sumA_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_sumA_channel <= ap_const_logic_0;
            else
                if (((sumStream_U0_ap_done and sumStream_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sumA_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sumA_channel <= ap_sync_channel_write_sumA_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sumB_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_sumB_channel <= ap_const_logic_0;
            else
                if (((sumStream_1_U0_ap_done and sumStream_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sumB_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sumB_channel <= ap_sync_channel_write_sumB_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_sumStream_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_sumStream_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_sumStream_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_sumStream_1_U0_ap_ready <= ap_sync_sumStream_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_sumStream_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_sumStream_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_sumStream_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_sumStream_U0_ap_ready <= ap_sync_sumStream_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    A_TREADY <= sumStream_U0_A_TREADY;
    B_TREADY <= sumStream_1_U0_B_TREADY;
    Block_entry2347_proc6_U0_ap_continue <= ap_const_logic_1;
    Block_entry2347_proc6_U0_ap_start <= (sumB_channel_empty_n and sumA_channel_empty_n and numDataB_channel_empty_n and numDataA_channel_empty_n and famB_t_empty_n and famA_t_empty_n);
    ap_channel_done_famA <= (sumStream_U0_ap_done and (ap_sync_reg_channel_write_famA xor ap_const_logic_1));
    ap_channel_done_famB <= (sumStream_1_U0_ap_done and (ap_sync_reg_channel_write_famB xor ap_const_logic_1));
    ap_channel_done_numDataA_channel <= (sumStream_U0_ap_done and (ap_sync_reg_channel_write_numDataA_channel xor ap_const_logic_1));
    ap_channel_done_numDataB_channel <= (sumStream_1_U0_ap_done and (ap_sync_reg_channel_write_numDataB_channel xor ap_const_logic_1));
    ap_channel_done_sumA_channel <= (sumStream_U0_ap_done and (ap_sync_reg_channel_write_sumA_channel xor ap_const_logic_1));
    ap_channel_done_sumB_channel <= (sumStream_1_U0_ap_done and (ap_sync_reg_channel_write_sumB_channel xor ap_const_logic_1));
    ap_done <= Block_entry2347_proc6_U0_ap_done;
    ap_idle <= (sumStream_U0_ap_idle and sumStream_1_U0_ap_idle and (numDataB_channel_empty_n xor ap_const_logic_1) and (sumB_channel_empty_n xor ap_const_logic_1) and (numDataA_channel_empty_n xor ap_const_logic_1) and (sumA_channel_empty_n xor ap_const_logic_1) and (famB_t_empty_n xor ap_const_logic_1) and (famA_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and Block_entry2347_proc6_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_famA <= ((sumStream_U0_fam_full_n and ap_channel_done_famA) or ap_sync_reg_channel_write_famA);
    ap_sync_channel_write_famB <= ((sumStream_1_U0_fam_full_n and ap_channel_done_famB) or ap_sync_reg_channel_write_famB);
    ap_sync_channel_write_numDataA_channel <= ((numDataA_channel_full_n and ap_channel_done_numDataA_channel) or ap_sync_reg_channel_write_numDataA_channel);
    ap_sync_channel_write_numDataB_channel <= ((numDataB_channel_full_n and ap_channel_done_numDataB_channel) or ap_sync_reg_channel_write_numDataB_channel);
    ap_sync_channel_write_sumA_channel <= ((sumA_channel_full_n and ap_channel_done_sumA_channel) or ap_sync_reg_channel_write_sumA_channel);
    ap_sync_channel_write_sumB_channel <= ((sumB_channel_full_n and ap_channel_done_sumB_channel) or ap_sync_reg_channel_write_sumB_channel);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_sumStream_U0_ap_ready and ap_sync_sumStream_1_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    ap_sync_sumStream_1_U0_ap_ready <= (sumStream_1_U0_ap_ready or ap_sync_reg_sumStream_1_U0_ap_ready);
    ap_sync_sumStream_U0_ap_ready <= (sumStream_U0_ap_ready or ap_sync_reg_sumStream_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    gmem_BID <= ap_const_lv1_0;
    gmem_BRESP <= ap_const_lv2_0;
    gmem_BUSER <= ap_const_lv1_0;
    sumStream_1_U0_ap_continue <= (ap_sync_channel_write_sumB_channel and ap_sync_channel_write_numDataB_channel and ap_sync_channel_write_famB);
    sumStream_1_U0_ap_start <= ((ap_sync_reg_sumStream_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    sumStream_1_U0_fam_full_n <= famB_i_full_n;
    sumStream_U0_ap_continue <= (ap_sync_channel_write_sumA_channel and ap_sync_channel_write_numDataA_channel and ap_sync_channel_write_famA);
    sumStream_U0_ap_start <= ((ap_sync_reg_sumStream_U0_ap_ready xor ap_const_logic_1) and ap_start);
    sumStream_U0_fam_full_n <= famA_i_full_n;
end behav;
